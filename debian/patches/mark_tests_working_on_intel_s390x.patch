Description: Mark those tests @pytest.mark.intel that pass only on Intel architectures
  There was another test failing for s390x (and armhf, mips, hppa, powerpc, ppc64, sparc64)
Author: Andreas Tille <tille@debian.org>
Last-Update: Mon, 23 Oct 2017 14:18:56 +0200
Bug-Debian: https://bugs.debian.org/877419

--- a/pandas/tests/io/test_packers.py
+++ b/pandas/tests/io/test_packers.py
@@ -59,6 +59,7 @@ def all_packers_data():
     return create_data()
 
 
+@pytest.mark.intel
 def check_arbitrary(a, b):
 
     if isinstance(a, (list, tuple)) and isinstance(b, (list, tuple)):
@@ -901,6 +902,7 @@ TestPackers
         else:
             tm.assert_frame_equal(result, expected)
 
+    @pytest.mark.intel
     @pytest.mark.parametrize('version', legacy_packers_versions())
     def test_msgpacks_legacy(self, current_packers_data, all_packers_data,
                              version):
--- a/pandas/tests/frame/test_convert_to.py
+++ b/pandas/tests/frame/test_convert_to.py
@@ -175,6 +175,7 @@ class TestDataFrameConvertTo(TestData):
         expected = np.rec.array([('x', 'y')], dtype=[('a', 'O'), ('b', 'O')])
         tm.assert_almost_equal(result, expected)
 
+    @pytest.mark.intel
     def test_to_records_with_unicode_column_names(self):
         # xref issue: https://github.com/numpy/numpy/issues/2407
         # Issue #11879. to_records used to raise an exception when used
--- a/pandas/tests/indexes/datetimes/test_formats.py
+++ b/pandas/tests/indexes/datetimes/test_formats.py
@@ -2,10 +2,11 @@ from pandas import DatetimeIndex
 
 import numpy as np
 
+import pytest
 import pandas.util.testing as tm
 import pandas as pd
 
-
+@pytest.mark.intel
 def test_to_native_types():
     index = DatetimeIndex(freq='1D', periods=3, start='2017-01-01')
 
--- a/pandas/tests/indexes/period/test_formats.py
+++ b/pandas/tests/indexes/period/test_formats.py
@@ -2,10 +2,11 @@ from pandas import PeriodIndex
 
 import numpy as np
 
+import pytest
 import pandas.util.testing as tm
 import pandas as pd
 
-
+@pytest.mark.intel
 def test_to_native_types():
     index = PeriodIndex(['2017-01-01', '2017-01-02',
                          '2017-01-03'], freq='D')
--- a/pandas/tests/dtypes/test_cast.py
+++ b/pandas/tests/dtypes/test_cast.py
@@ -137,6 +137,7 @@ class TestInferDtype(object):
             dtype, val = infer_dtype_from_scalar(data)
             assert dtype == np.object_
 
+    @pytest.mark.intel
     @pytest.mark.parametrize(
         "arr, expected",
         [('foo', np.object_),
